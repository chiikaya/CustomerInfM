<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop.xsd
      http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

      <!-- -1. 自动为目标类创建代理对象-->
      <!-- proxy-target-class:给目标对象生成代理，是基于类生成，而不是基于代理-->
      <!--proxy-target-class="true" : 基于目标类生成代理，而不是接口-->
      <aop:aspectj-autoproxy />


    <!-- 0.组件扫描器 ，自动扫描com.oaec 包中所有的加入注解的类，并创建实例 -->
    <context:component-scan base-package="com.oaec">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 1.去读取配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 2.Druid 数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"/>
        <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}"/>
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
    </bean>

    <!-- 3.jdbc模板 -->
    <bean  id="template" class="org.springframework.jdbc.core.JdbcTemplate">
      <property name="dataSource" ref="dataSource"/>
    </bean>


    <!--4.事物管理器     id: 最好用transactionManager      ref: + 数据源的id-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--5. 事务注解驱动  transaction-manager ：+ 事务管理器中 id 的名-->
    <!--如果 事务管理器中id的名为：transactionManager，可以省略 transaction-manager="transactionManager"-->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!--6. 把SqlSessionFactory交给spring去管理-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--mybatis的全局配置文件-->
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <!--mapper文件的位置-->
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
    </bean>

    <!--7. spring帮你去创建dao接口的代理实现类对象-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指明dao接口所在的位置-->
        <property name="basePackage" value="com.oaec.dao"/>
    </bean>


</beans>